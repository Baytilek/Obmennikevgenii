"use client";
import React, { useEffect, useMemo, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectGroup, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { MessageSquare, ArrowRightLeft, ExternalLink, Loader2, Shield } from "lucide-react";
import { motion } from "framer-motion";

const COMMISSION_PCT = 5;
const PAYEER_OWNER_WALLET = "P1133571456";
const SUPPORT_TG = "@evgenii096";
const COMMUNITY_LINK = "https://t.me/+3ZCL7BsqtuM1ZTRi";
const CRYPTO_BOT_NAME = "@send";

const METHODS = [
  { code: "CARD", label: "КАРТА" },
  { code: "PAYEER", label: "PAYEER" },
  { code: "SEND", label: "КРИПТО-БОТ (@send)" },
];

type Method = typeof METHODS[number]["code"];
const ROUTES: Array<{ from: Method; to: Method }> = [];
METHODS.forEach((a) => METHODS.forEach((b) => { if (a.code !== b.code) ROUTES.push({ from: a.code, to: b.code }); }));

function fmt(x: number, max = 2) { return new Intl.NumberFormat(undefined, { maximumFractionDigits: max }).format(x); }
function calcCommission(amount: number) { const fee = (amount * COMMISSION_PCT) / 100; const receive = Math.max(amount - fee, 0); return { fee, receive }; }

function useLocalStorage<T>(key: string, initial: T) {
  const [val, setVal] = useState<T>(() => { try { const raw = localStorage.getItem(key); return raw ? JSON.parse(raw) : initial; } catch { return initial; } });
  useEffect(() => { try { localStorage.setItem(key, JSON.stringify(val)); } catch {} }, [key, val]);
  return [val, setVal] as const;
}

// Новый notifyOperator через API Next.js
async function notifyOperator(payload: any) {
  try {
    const res = await fetch("/api/telegram", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ payload }),
    });
    return await res.json();
  } catch (e) {
    console.error(e);
    return { ok: false, error: e.message };
  }
}

export default function ExchangeApp() {
  const [from, setFrom] = useLocalStorage<Method>("ex.from", "CARD");
  const [to, setTo] = useLocalStorage<Method>("ex.to", "PAYEER");
  const [amount, setAmount] = useLocalStorage<number>("ex.amount", 1000);
  const [cardSender, setCardSender] = useLocalStorage("ex.cardSender", "");
  const [cardRecipient, setCardRecipient] = useLocalStorage("ex.cardRecipient", "");
  const [payeerRecipient, setPayeerRecipient] = useLocalStorage("ex.payeerRecipient", "");
  const [payeerTxNote, setPayeerTxNote] = useLocalStorage("ex.payeerTxNote", "");
  const [sendCheck, setSendCheck] = useLocalStorage("ex.sendCheck", "");
  const [telegramUser, setTelegramUser] = useLocalStorage("ex.telegramUser", "");
  const [comment, setComment] = useLocalStorage("ex.comment", "");
  const [submitting, setSubmitting] = useState(false);
  const [done, setDone] = useState<any>(null);

  useEffect(() => { if (from === to) setTo(from === "CARD" ? "PAYEER" : "CARD"); }, [from, to]);
  const { fee, receive } = useMemo(() => calcCommission(Number(amount) || 0), [amount]);
  const routeLabel = (code: Method) => METHODS.find(m => m.code === code)?.label || code;

  function routeInfo() {
    if (from === "CARD" && to === "PAYEER") return <Alert><AlertTitle>КАРТА → PAYEER</AlertTitle><AlertDescription>Укажите сумму, номер карты <b>отправителя</b> и свой PAYEER. После создания заявки оператор пришлёт инструкции.</AlertDescription></Alert>;
    if (from === "PAYEER" && to === "CARD") return <Alert><AlertTitle>PAYEER → КАРТА</AlertTitle><AlertDescription>Переведите <b>точную сумму</b> на кошелёк <b>{PAYEER_OWNER_WALLET}</b>, укажите карту для зачисления и заметку/tx ID.</AlertDescription></Alert>;
    if (from === "SEND") return <Alert><AlertTitle>КРИПТО-БОТ → {routeLabel(to)}</AlertTitle><AlertDescription>Вставьте ссылку-чек из {CRYPTO_BOT_NAME}. Средства будут высланы после обработки оператором.</AlertDescription></Alert>;
    if (to === "SEND") return <Alert><AlertTitle>{routeLabel(from)} → КРИПТО-БОТ</AlertTitle><AlertDescription>Укажите ваш <b>@username</b> в Telegram — мы отправим чек {CRYPTO_BOT_NAME} через бота.</AlertDescription></Alert>;
    return null;
  }

  const needCardSender = from === "CARD";
  const needPayeerRecipient = to === "PAYEER";
  const needCardRecipient = to === "CARD";
  const needPayeerPayInstr = from === "PAYEER" && to === "CARD";
  const needSendCheck = from === "SEND";
  const needTelegramUser = to === "SEND";

  async function submit() {
    setSubmitting(true);
    const payload = {
      createdAt: new Date().toISOString(),
      from, to, amount: Number(amount) || 0, fee, receive,
      cardSender: needCardSender ? cardSender : undefined,
      cardRecipient: needCardRecipient ? cardRecipient : undefined,
      payeerRecipient: needPayeerRecipient ? payeerRecipient : undefined,
      payeerTxNote: needPayeerPayInstr ? payeerTxNote : undefined,
      sendCheck: needSendCheck ? sendCheck : undefined,
      telegramUser: needTelegramUser ? telegramUser : undefined,
      comment: comment || undefined,
    };
    const res = await notifyOperator(payload);
    setDone({ ok: res.ok, payload });
    setSubmitting(false);
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-slate-50 to-white text-slate-900">
      <header className="max-w-5xl mx-auto px-4 py-6 flex items-center justify-between">
        <div className="flex items-center gap-3"><ArrowRightLeft className="w-7 h-7" /><h1 className="text-2xl font-semibold">SwiftXchange</h1><Badge variant="secondary" className="ml-2">MVP</Badge></div>
        <a href={COMMUNITY_LINK} target="_blank" rel="noreferrer" className="inline-flex items-center gap-2 text-sm hover:underline"><MessageSquare className="w-4 h-4" /> Присоединиться к чату<ExternalLink className="w-3 h-3" /></a>
      </header>

      <main className="max-w-5xl mx-auto px-4 pb-24">
        <motion.div initial={{ opacity: 0, y: 8 }} animate={{ opacity: 1, y: 0 }}>
          <Card className="shadow-xl border-slate-200">
            <CardHeader className="space-y-1">
              <CardTitle className="text-xl">Создать заявку на обмен</CardTitle>
              <p className="text-sm text-slate-500">Обработка: от 5 минут до 1 часа. При задержке — пишите <a className="underline" href={`https://t.me/${SUPPORT_TG.replace('@','')}`} target="_blank" rel="noreferrer">{SUPPORT_TG}</a>.</p>
            </CardHeader>
            <CardContent className="grid gap-6">
              <div className="grid sm:grid-cols-2 gap-4">
                <div>
                  <Label>Откуда</Label>
                  <Select value={from} onValueChange={(v: Method) => setFrom(v)}>
                    <SelectTrigger className="mt-1"><SelectValue placeholder="Выберите метод" /></SelectTrigger>
                    <SelectContent><SelectGroup>{METHODS.map(m => <SelectItem key={m.code} value={m.code}>{m.label}</SelectItem>)}</SelectGroup></SelectContent>
                  </Select>
                </div>
                <div>
                  <Label>Куда</Label>
                  <Select value={to} onValueChange={(v: Method) => setTo(v)}>
                    <SelectTrigger className="mt-1"><SelectValue placeholder="Выберите метод" /></SelectTrigger>
                    <SelectContent><SelectGroup>{METHODS.filter(m => m.code !== from).map(m => <SelectItem key={m.code} value={m.code}>{m.label}</SelectItem>)}</SelectGroup></SelectContent>
                  </Select>
                </div>
              </div>

              {routeInfo()}

              <div className="grid sm:grid-cols-2 gap-4">
                <div>
                  <Label>Сумма (в исходном методе)</Label>
                  <Input type="number" min={0} value={amount} onChange={e => setAmount(Number(e.target.value))} className="mt-1" />
                  <p className="text-xs text-slate-500 mt-1">Комиссия сервиса: {COMMISSION_PCT}%</p>
                </div>
                <div className="bg-slate-50 rounded-2xl p-4 border border-slate-200">
                  <div className="flex items-center justify-between text-sm"><span>Комиссия</span><b>{fmt(fee)} </b></div>
                  <div className="flex items-center justify-between text-base mt-2"><span>Вы получите</span><b>{fmt(receive)}</b></div>
                </div>
              </div>

              {needCardSender && <div><Label>Номер карты/телефон ОТПРАВИТЕЛЯ</Label><Input placeholder="для проверки — откуда платёж" value={cardSender} onChange={e => setCardSender(e.target.value)} className="mt-1" /></div>}
              {needPayeerRecipient && <div><Label>Ваш PAYEER (P••••)</Label><Input placeholder="например, P123456789" value={payeerRecipient} onChange={e => setPayeerRecipient(e.target.value)} className="mt-1" /></div>}
              {needCardRecipient && <div><Label>Карта для зачисления</Label><Input placeholder="номер карты получателя" value={cardRecipient} onChange={e => setCardRecipient(e.target.value)} className="mt-1" /></div>}
              {needPayeerPayInstr && <div className="grid gap-2"><Label>Инструкция для оплаты с PAYEER</Label><div className="rounded-xl border p-3 bg-slate-50 text-sm">Переведите <b>{fmt(Number(amount) || 0)}</b> на кошелёк <b>{PAYEER_OWNER_WALLET}</b>. Укажите карту и tx ID.</div><Input placeholder="Заметка/tx ID (необязательно)" value={payeerTxNote} onChange={e => setPayeerTxNote(e.target.value)} /></div>}
              {needSendCheck && <div><Label>Ссылка-чек из {CRYPTO_BOT_NAME}</Label><Input placeholder="https://t.me/send?start=..." value={sendCheck} onChange={e => setSendCheck(e.target.value)} className="mt-1" /></div>}
              {needTelegramUser && <div><Label>Ваш Telegram (@username) для чека</Label><Input placeholder="@username" value={telegramUser} onChange={e => setTelegramUser(e.target.value)} className="mt-1" /></div>}

              <div><Label>Комментарий (необязательно)</Label><Textarea placeholder="заметки к заявке" value={comment} onChange={e => setComment(e.target.value)} className="mt-1" /></div>

              <div className="flex items-center gap-3">
                <Button disabled={submitting} onClick={submit} className="min-w-44">{submitting ? <><Loader2 className="w-4 h-4 mr-2 animate-spin"/>Отправка…</> : "Создать заявку"}</Button>
                <p className="text-sm text-slate-500">Заявка обрабатывается <b>от 5 минут до 1 часа</b>. При задержке — {SUPPORT_TG}.</p>
              </div>

              {done && <Alert className={done.ok ? "border-emerald-300" : "border-amber-300"}><AlertTitle>{done.ok ? "Заявка отправлена оператору" : "Заявка создана (локально)"}</AlertTitle><AlertDescription className="space-y-2"><div>Номер заявки: <b>{Math.abs(hash(JSON.stringify(done.payload))).toString().slice(0,8)}</b></div><div className="text-xs text-slate-500">Статус: ожидает обработки оператором. Срок: 5–60 минут.</div></AlertDescription></Alert>}

              <div className="text-xs text-slate-500 flex items-start gap-2"><Shield className="w-4 h-4 mt-0.5" /><p>Анти-фрод: сверяем номер карты отправителя/чек {CRYPTO_BOT_NAME}; несоответствия отклоняются.</p></div>
            </CardContent>
          </Card>
        </motion.div>

        <footer className="mt-8 text-center text-sm text-slate-500">
          <p>Нужна автоматизация? Напишите {SUPPORT_TG}. Чат по заработку — <a className="underline" href={COMMUNITY_LINK} target="_blank" rel="noreferrer">войти</a>.</p>
        </footer>
      </main>
    </div>
  );
}

function hash(s: string) { let h = 0; for (let i = 0; i < s.length; i++) { h = ((h << 5) - h) + s.charCodeAt(i); h |= 0; } return h; }

}
